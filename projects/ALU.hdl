// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // if (zx == 1) sets x = 0        // 16-bit constant
    Nand(a=zx, b=true, out=zxNand);
    Mux16(a=false, b=x, sel=zxNand, out=x1);
    
    // if (nx == 1) sets x = !x       // bitwise not
    Nand(a=nx, b=true, out=nxNand);
    Not16(in=x1, out=notX1);
    Mux16(a=notX1, b=x1, sel=nxNand, out=x2);


    // if (zy == 1) sets y = 0        // 16-bit constant
    Nand(a=zy, b=true, out=zyNand);
    Mux16(a=false, b=y, sel=zyNand, out=y1);
    
    // if (nx == 1) sets x = !x       // bitwise not
    Nand(a=ny, b=true, out=nyNand);
    Not16(in=y1, out=notY1);
    Mux16(a=notY1, b=y1, sel=nyNand, out=y2);

   
    // if (f == 0)  sets out = x & y  // bitwise and
    And16(a=x2, b=y2, out=f0);

    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    Add16(a=x2, b=y2, out=f1);

    // f
    Nand(a=f, b=true, out=nfNand);
    Mux16(a=f1, b=f0, sel=nfNand, out=fOut);


    // if (no == 1) sets out = !out   // bitwise not
    Nand(a=no, b=true, out=noNand);
    Not16(in=fOut, out=notFOut);
    Mux16(a=notFOut, b=fOut, sel=noNand, out=nOut);

    // out
    Or16(a=nOut, b=false, out=out);


    // if (out == 0) zr = 1, else zr = 0


    // if (out < 0)  ng = 1, else ng = 0
}
